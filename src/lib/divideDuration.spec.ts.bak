import { describe, expect, it } from 'vitest'
import { divideDuration } from './divideDuration.ts.bak'


describe('divideDuration(duration1: string).by(duration2: string): number', () => {
  it('divideDuration(duration: string) returns an object with a single property, "by", in it', () => {
    const response = divideDuration('1 day')

    expect(typeof response).toBe('object')
  })

  it('divideDuration(duration: string).by is a function', () => {
    const response = divideDuration('1 day')

    expect(typeof response.by).toBe('function')
  })

  type DivisionTest = [
    duration: string,
    divisor: string,
    result: number,
    fuzzy?: boolean,
  ]

  const tests: DivisionTest[] = [
    ['1 week', 'days', 7],
    ['2 minutes', 'second', 120],
    ['3 days', 'hour', 24 * 3],
    ['1 day', '3 hours', 8],
    ['1 year', 'month', 12, true],
    ['4 months', 'weeks', 4.25 * 4, true],
    ['3 minutes', 'seconds', 60 * 3],
    ['1 week', 'seconds', 60 * 60 * 24 * 7],
    ['24 hours', 'minutes', 60 * 24],
    ['3 days', 'hours', 24 * 3],
    ['1 day, 30 minutes', 'hours', 24 + 0.5],
    ['1 week', 'days', 7],
    ['12 hours', 'days', 0.5],
    ['3 months', 'days', 30.5 * 3, true],
    ['1 year', 'weeks', 52, true],
    ['1 month', 'weeks', 4.3, true],
    ['3 years', 'months', 36, true],
  ]

  describe('divides dates', () => {
    for (const [duration, divisor, expected, fuzzy] of tests) {
      it(`divideDuration('${duration}').by('${divisor}') = ${fuzzy ? '~' : ''}${expected}`, () => {
        const value = divideDuration(duration).by(divisor)

        if (fuzzy) {
          console.log('fuzzy comparing', value, 'to', expected)
          const proximity = Math.min(value, expected) / Math.max(value, expected)
          const closeEnough = proximity > 0.95
          expect(closeEnough).toBe(true)
        } else {
          expect(value).toBe(expected)
        }
      })
    }
  })
})
